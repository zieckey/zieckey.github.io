<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cgo on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/cgo/</link>
    <description>Recent content in Cgo on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 21:43:00 +0000</lastBuildDate>
    <atom:link href="http://blog.codeg.cn/tags/cgo/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang CGO编程之调用返回char*指针及长度的C函数库</title>
      <link>http://blog.codeg.cn/post/blog/2016-04-20-golang-cgo/</link>
      <pubDate>Wed, 20 Apr 2016 21:43:00 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/blog/2016-04-20-golang-cgo/</guid>
      <description>

&lt;p&gt;现代所有主流操作系统几乎都是用C语音实现的，几乎所有高级语言都能调用C语言，例如PHP可以调用C语言写的PHP扩展，Python也可以调用C语言实现的Python扩展。
Golang语言也不例外。&lt;/p&gt;

&lt;p&gt;Golang通过CGO机制能很方便的调用C语言。本文介绍一下如何在Go中调用稍稍复杂一点C函数，例如： &lt;code&gt;char* f(int, int*)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;首先看一个最简单的例子，将Golang中的一个字符串传入C函数中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

/*
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
void print(char *str) {
    printf(&amp;quot;%s\n&amp;quot;, str);
}
*/
import &amp;quot;C&amp;quot;

import &amp;quot;unsafe&amp;quot;

func main() {
    s := &amp;quot;Hello Cgo&amp;quot;
    cs := C.CString(s)
    C.print(cs)
    C.free(unsafe.Pointer(cs))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意上述程序中的关键语句&lt;code&gt;cs := C.CString(s)&lt;/code&gt;是将一个Golang的字符串转换为C语言字符串，该C语言字符串是由C函数malloc从堆中分配的，因此后续需要调用 &lt;code&gt;C.free&lt;/code&gt; 释放内存。&lt;/p&gt;

&lt;p&gt;然后，我们看看如何调用一个复杂一点的C函数？例如： &lt;code&gt;char* f(int, int*)&lt;/code&gt; ，返回一个&lt;code&gt;char*&lt;/code&gt;指针，并且有一个参数也是返回值&lt;code&gt;int*&lt;/code&gt;。请直接看下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

/*
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
char* xmalloc(int len, int *rlen)
{
    static const char* s = &amp;quot;0123456789&amp;quot;;
    char* p = malloc(len);
    if (len &amp;lt;= strlen(s)) {
        memcpy(p, s, len);
    } else {
        memset(p, &#39;a&#39;, len);
    }
    *rlen = len;
    return p;
}
*/
import &amp;quot;C&amp;quot;
import &amp;quot;unsafe&amp;quot;
import &amp;quot;fmt&amp;quot;

func main() {
	rlen := C.int(0)
	len := 10
	cstr := C.xmalloc(C.int(len), &amp;amp;rlen)
	defer C.free(unsafe.Pointer(cstr))
	gostr := C.GoStringN(cstr, rlen)
	fmt.Printf(&amp;quot;retlen=%v\n&amp;quot;, rlen)
	println(gostr)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;xmalloc&lt;/code&gt;函数的第二个参数是&lt;code&gt;int*&lt;/code&gt;，这里设计为一个输入、输出参数。我们在Golang中使用C.int类型的指针就可以；
其返回值是一个&lt;code&gt;char*&lt;/code&gt;，在Golang中就是 &lt;code&gt;*C.char&lt;/code&gt;，由于返回值是指针，其内存由malloc分配，因此需要在Golang中对其内存进行释放。&lt;/p&gt;

&lt;p&gt;再然后，我们看看如何调用一个返回结构体的C函数？例如：&lt;code&gt;struct MyString xmalloc(int len)&lt;/code&gt;。请看示例代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

/*
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

struct MyString
{
    char* s;
    int len;
};

struct MyString xmalloc(int len)
{
    static const char* s = &amp;quot;0123456789&amp;quot;;
    char* p = malloc(len);
    if (len &amp;lt;= strlen(s)) {
        memcpy(p, s, len);
    } else {
        memset(p, &#39;a&#39;, len);
    }
    struct MyString str;
    str.s = p;
    str.len = len;
    return str;
}
*/
import &amp;quot;C&amp;quot;
import &amp;quot;unsafe&amp;quot;
import &amp;quot;fmt&amp;quot;

func main() {
	len := 10
	str := C.xmalloc(C.int(len))
	defer C.free(unsafe.Pointer(str.s))
	gostr := C.GoStringN(str.s, str.len)
	fmt.Printf(&amp;quot;retlen=%v\n&amp;quot;, str.len)
	println(gostr)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:1d9c7bc1f63996ea5a05ef9bf93a075a&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/c-go-cgo&#34;&gt;http://blog.golang.org/c-go-cgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/cgo/&#34;&gt;https://golang.org/cmd/cgo/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>