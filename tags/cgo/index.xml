<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cgo on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/cgo/</link>
    <description>Recent content in cgo on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 May 2016 20:12:01 +0000</lastBuildDate><atom:link href="http://blog.codeg.cn/tags/cgo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何在win7 64位系统下安装gopcap包及使用</title>
      <link>http://blog.codeg.cn/post/2016-05-26-howto-build-gopcap-on-windows-x64/</link>
      <pubDate>Wed, 25 May 2016 20:12:01 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/2016-05-26-howto-build-gopcap-on-windows-x64/</guid>
      <description>gopcap是libpcap库的Golang封装，其项目地址在这里 https://github.com/akrennmair/gopcap 。 本文简要介绍一下如何在win7 64位系统平台上使用 gopcap 库。
安装步骤如下：
 安装Golang 64位版本 安装mingw 64位版本，注意导入到windows环境变量中。让命令行能自动找到 gcc 命令 在 http://www.tcpdump.org/ 下载 libpcap-1.7.4.tar.gz，从这个包中得到libpcap的C语言头文件 在 https://www.winpcap.org/install/ 下载winpcap并安装，从这里可以得到libpcap的windows DLL文件 wpcap.dll，用于运行 在 http://www.winpcap.org/archive/ 下载 4.1.1-WpdPack.zip，从其中的x64目录下找到 wpcap.lib 库，用于编译 执行下列命令：  这里，将相关头文库、库文件都放在 C:\wpdpcak 目录下，是因为 gopcap 库的cgo编译选择是这么设置，当然你也可以修改源码的方式来重新设置目录。
 编译过程中如果出现下列错误  $ go build # github.com/akrennmair/gopcap In file included from C:/WpdPack/Include/pcap.h:43:0, from ..\..\..\akrennmair\gopcap\pcap.go:12: C:/WpdPack/Include/pcap/pcap.h:450:1: error: unknown type name &amp;#39;Adapter&amp;#39; Adapter *pcap_get_adapter(pcap_t *p); ^ 就将 pcap/pcap.h 中这一行注释掉。   至此，应该再不会有问题了，编译成功。 gopcap 库的toots目录有很多使用用例，可以看看以了解如何使用。  参考  http://blog.</description>
    </item>
    
    <item>
      <title>Golang CGO编程之调用返回char*指针及长度的C函数库</title>
      <link>http://blog.codeg.cn/post/2016-04-20-golang-cgo/</link>
      <pubDate>Wed, 20 Apr 2016 21:43:00 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/2016-04-20-golang-cgo/</guid>
      <description>现代所有主流操作系统几乎都是用C语音实现的，几乎所有高级语言都能调用C语言，例如PHP可以调用C语言写的PHP扩展，Python也可以调用C语言实现的Python扩展。 Golang语言也不例外。
Golang通过CGO机制能很方便的调用C语言。本文介绍一下如何在Go中调用稍稍复杂一点C函数，例如： char* f(int, int*)
首先看一个最简单的例子，将Golang中的一个字符串传入C函数中：
package main /* #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; void print(char *str) { printf(&amp;#34;%s\n&amp;#34;, str); } */ import &amp;#34;C&amp;#34; import &amp;#34;unsafe&amp;#34; func main() { s := &amp;#34;Hello Cgo&amp;#34; cs := C.CString(s) C.print(cs) C.free(unsafe.Pointer(cs)) } 注意上述程序中的关键语句cs := C.CString(s)是将一个Golang的字符串转换为C语言字符串，该C语言字符串是由C函数malloc从堆中分配的，因此后续需要调用 C.free 释放内存。
然后，我们看看如何调用一个复杂一点的C函数？例如： char* f(int, int*) ，返回一个char*指针，并且有一个参数也是返回值int*。请直接看下面的例子：
package main /* #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; char* xmalloc(int len, int *rlen) { static const char* s = &amp;#34;0123456789&amp;#34;; char* p = malloc(len); if (len &amp;lt;= strlen(s)) { memcpy(p, s, len); } else { memset(p, &amp;#39;a&amp;#39;, len); } *rlen = len; return p; } */ import &amp;#34;C&amp;#34; import &amp;#34;unsafe&amp;#34; import &amp;#34;fmt&amp;#34; func main() { rlen := C.</description>
    </item>
    
  </channel>
</rss>
