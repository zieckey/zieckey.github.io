<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shared_ptr on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/shared_ptr/</link>
    <description>Recent content in Shared_ptr on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Wed, 19 Apr 2017 10:11:01 +0000</lastBuildDate>
    <atom:link href="http://blog.codeg.cn/tags/shared_ptr/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>evpp设计细节系列(1)：利用 enable_shared_from_this 实现一个自管理的定时器</title>
      <link>http://blog.codeg.cn/post/blog/2017-04-19-the-detail-design-of-evpp-invoke-timer/</link>
      <pubDate>Wed, 19 Apr 2017 10:11:01 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/blog/2017-04-19-the-detail-design-of-evpp-invoke-timer/</guid>
      <description>

&lt;h1 id=&#34;0-前言:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;0. 前言&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;https://github.com/Qihoo360/evpp&lt;/a&gt;是一个高性能的Reactor模式的现代化的C++11版本的高性能网络库。该项目中有一个&lt;code&gt;InvokeTimer&lt;/code&gt;对象，接口头文件详细代码请参见&lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/invoke_timer.h&#34;&gt;https://github.com/Qihoo360/evpp/blob/master/evpp/invoke_timer.h&lt;/a&gt;。它是一个能自我管理的定时器类，可以将一个仿函数绑定到该定时器上，然后让该定时器自己管理并在预期的一段时间后执行该仿函数。&lt;/p&gt;

&lt;p&gt;现在我们复盘一下这个功能的实现细节和演化过程。&lt;/p&gt;

&lt;h1 id=&#34;1-基础代码:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;1. 基础代码&lt;/h1&gt;

&lt;p&gt;定时器原型声明可能是下面的样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class InvokeTimer {
public:
    InvokeTimer(struct event_base* evloop, double timeout_ms, const std::function&amp;lt;void()&amp;gt;&amp;amp; f);
    ~InvokeTimer();
    void Start();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个是最基本的接口，可以设置一个仿函数，并设置一个过期时间，然后绑定到一个&lt;code&gt;event_base&lt;/code&gt;对象上，然后就可以期待过了一个预期的时间后，我们设置的仿函数被调用了。&lt;/p&gt;

&lt;p&gt;为了便于说明后续的多个版本的实现，我们先将基础的不变的代码说明一下。&lt;/p&gt;

&lt;p&gt;基础代码，我们采用&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;项目中的&lt;code&gt;TimerEventWatcher&lt;/code&gt;，详细实现在这里&lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/event_watcher.h&#34;&gt;event_watcher.h&lt;/a&gt;和&lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/event_watcher.cc&#34;&gt;event_watcher.cc&lt;/a&gt;。它是一个时间定时器观察者对象，可以观察一个时间事件。&lt;/p&gt;

&lt;p&gt;头文件&lt;code&gt;event_watcher.h&lt;/code&gt;定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#pragma once

#include &amp;lt;functional&amp;gt;

struct event;
struct event_base;

namespace recipes {

class EventWatcher {
public:
    typedef std::function&amp;lt;void()&amp;gt; Handler;
    virtual ~EventWatcher();
    bool Init();
    void Cancel();

    void SetCancelCallback(const Handler&amp;amp; cb);
    void ClearHandler() { handler_ = Handler(); }
protected:
    EventWatcher(struct event_base* evbase, const Handler&amp;amp; handler);
    bool Watch(double timeout_ms);
    void Close();
    void FreeEvent();

    virtual bool DoInit() = 0;
    virtual void DoClose() {}

protected:
    struct event* event_;
    struct event_base* evbase_;
    bool attached_;
    Handler handler_;
    Handler cancel_callback_;
};

class TimerEventWatcher : public EventWatcher {
public:
    TimerEventWatcher(struct event_base* evbase, const Handler&amp;amp; handler, double timeout_ms);

    bool AsyncWait();

private:
    virtual bool DoInit();
    static void HandlerFn(int fd, short which, void* v);
private:
    double timeout_ms_;
};

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现文件&lt;code&gt;event_watcher.cc&lt;/code&gt;如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;lt;string.h&amp;gt;
#include &amp;lt;assert.h&amp;gt;

#include &amp;lt;event2/event.h&amp;gt;
#include &amp;lt;event2/event_struct.h&amp;gt;
#include &amp;lt;event2/event_compat.h&amp;gt;

#include &amp;lt;iostream&amp;gt;

#include &amp;quot;event_watcher.h&amp;quot;

namespace recipes {

EventWatcher::EventWatcher(struct event_base* evbase, const Handler&amp;amp; handler)
    : evbase_(evbase), attached_(false), handler_(handler) {
    event_ = new event;
    memset(event_, 0, sizeof(struct event));
}

EventWatcher::~EventWatcher() {
    FreeEvent();
    Close();
}

bool EventWatcher::Init() {
    if (!DoInit()) {
        goto failed;
    }

    ::event_base_set(evbase_, event_);
    return true;

failed:
    Close();
    return false;
}


void EventWatcher::Close() {
    DoClose();
}

bool EventWatcher::Watch(double timeout_ms) {
    struct timeval tv;
    struct timeval* timeoutval = nullptr;
    if (timeout_ms &amp;gt; 0) {
        tv.tv_sec = long(timeout_ms / 1000);
        tv.tv_usec = long(timeout_ms * 1000.0) % 1000;
        timeoutval = &amp;amp;tv;
    }

    if (attached_) {
        // When InvokerTimer::periodic_ == true, EventWatcher::Watch will be called many times
        // so we need to remove it from event_base before we add it into event_base
        if (event_del(event_) != 0) {
            std::cerr &amp;lt;&amp;lt; &amp;quot;event_del failed. fd=&amp;quot; &amp;lt;&amp;lt; this-&amp;gt;event_-&amp;gt;ev_fd &amp;lt;&amp;lt; &amp;quot; event_=&amp;quot; &amp;lt;&amp;lt; event_ &amp;lt;&amp;lt; std::endl;
            // TODO how to deal with it when failed?
        }
        attached_ = false;
    }

    assert(!attached_);
    if (event_add(event_, timeoutval) != 0) {
        std::cerr &amp;lt;&amp;lt; &amp;quot;event_add failed. fd=&amp;quot; &amp;lt;&amp;lt; this-&amp;gt;event_-&amp;gt;ev_fd &amp;lt;&amp;lt; &amp;quot; event_=&amp;quot; &amp;lt;&amp;lt; event_ &amp;lt;&amp;lt; std::endl;
        return false;
    }
    attached_ = true;
    return true;
}

void EventWatcher::FreeEvent() {
    if (event_) {
        if (attached_) {
            event_del(event_);
            attached_ = false;
        }

        delete (event_);
        event_ = nullptr;
    }
}

void EventWatcher::Cancel() {
    assert(event_);
    FreeEvent();

    if (cancel_callback_) {
        cancel_callback_();
        cancel_callback_ = Handler();
    }
}

void EventWatcher::SetCancelCallback(const Handler&amp;amp; cb) {
    cancel_callback_ = cb;
}


TimerEventWatcher::TimerEventWatcher(struct event_base* evbase,
                                     const Handler&amp;amp; handler,
                                     double timeout_ms)
    : EventWatcher(evbase, handler)
    , timeout_ms_(timeout_ms) {}

bool TimerEventWatcher::DoInit() {
    ::event_set(event_, -1, 0, TimerEventWatcher::HandlerFn, this);
    return true;
}

void TimerEventWatcher::HandlerFn(int /*fd*/, short /*which*/, void* v) {
    TimerEventWatcher* h = (TimerEventWatcher*)v;
    h-&amp;gt;handler_();
}

bool TimerEventWatcher::AsyncWait() {
    return Watch(timeout_ms_);
}

}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-一个最基本的实现-basic-01:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;2. 一个最基本的实现：basic-01&lt;/h1&gt;

&lt;p&gt;我们先尝试实现一个能满足最基本需求的定时器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;
// 头文件
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

struct event_base;

namespace recipes {

class TimerEventWatcher;
class InvokeTimer;

class InvokeTimer {
public:
    typedef std::function&amp;lt;void()&amp;gt; Functor;

    InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f);
    ~InvokeTimer();

    void Start();

private:
    void OnTimerTriggered();

private:
    struct event_base* loop_;
    double timeout_ms_;
    Functor functor_;
    std::shared_ptr&amp;lt;TimerEventWatcher&amp;gt; timer_;
};

}



// 实现文件
#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;

#include &amp;lt;thread&amp;gt;
#include &amp;lt;iostream&amp;gt;

namespace recipes {

InvokeTimer::InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f)
    : loop_(evloop), timeout_ms_(timeout_ms), functor_(f) {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

InvokeTimer::~InvokeTimer() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::~InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::Start() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
    timer_.reset(new TimerEventWatcher(loop_, std::bind(&amp;amp;InvokeTimer::OnTimerTriggered, this), timeout_ms_));
    timer_-&amp;gt;Init();
    timer_-&amp;gt;AsyncWait();
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start(AsyncWait) tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; timer=&amp;quot; &amp;lt;&amp;lt; timer_.get() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; timeout(ms)=&amp;quot; &amp;lt;&amp;lt; timeout_ms_ &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::OnTimerTriggered() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnTimerTriggered tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
    functor_();
    functor_ = Functor();
}

}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试main.cc&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;
#include &amp;quot;winmain-inl.h&amp;quot;

#include &amp;lt;event2/event.h&amp;gt;

void Print() {
    std::cout &amp;lt;&amp;lt; __FUNCTION__ &amp;lt;&amp;lt; &amp;quot; hello world.&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    struct event_base* base = event_base_new();
    auto timer = new recipes::InvokeTimer(base, 1000.0, &amp;amp;Print);
    timer-&amp;gt;Start();
    event_base_dispatch(base);
    event_base_free(base);
    delete timer;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们先创建一个&lt;code&gt;event_base&lt;/code&gt;对象，随后创建一个&lt;code&gt;InvokeTimer&lt;/code&gt;对象，随后让timer启动起来，即将timer注册到&lt;code&gt;event_base&lt;/code&gt;对象中，最后运行&lt;code&gt;event_base_dispatch(base)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面编译运行，结果是符合预期的：当timer的时间到期后，能顺利触发回调。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ls -l
total 80
-rw-rw-r-- 1 weizili weizili  2729 Apr 15 20:39 event_watcher.cc
-rw-rw-r-- 1 weizili weizili   996 Apr 15 20:39 event_watcher.h
-rw-rw-r-- 1 weizili weizili  1204 Apr 14 10:55 invoke_timer.cc
-rw-rw-r-- 1 weizili weizili   805 Apr 14 10:55 invoke_timer.h
-rw-rw-r-- 1 weizili weizili   374 Apr 14 10:55 main.cc
$ g++ -std=c++11 event_watcher.cc invoke_timer.cc main.cc -levent
$ ./a.out
InvokeTimer::InvokeTimer tid=139965845526336 this=0x7ffd2790f780
InvokeTimer::Start tid=139965845526336 this=0x7ffd2790f780
InvokeTimer::Start(AsyncWait) tid=139965845526336 timer=0x14504c0 this=0x7ffd2790f780 timeout(ms)=1000
InvokeTimer::OnTimerTriggered tid=139965845526336 this=0x7ffd2790f780
Print hello world.
InvokeTimer::~InvokeTimer tid=139965845526336 this=0x7ffd2790f780
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个实现方式，&lt;code&gt;InvokeTimer&lt;/code&gt;对象生命周期的管理是一个问题，它需要调用者自己管理。&lt;/p&gt;

&lt;h1 id=&#34;3-能够实现最基本自我管理-basic-02:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;3. 能够实现最基本自我管理：basic-02&lt;/h1&gt;

&lt;p&gt;为了实现&lt;code&gt;InvokeTimer&lt;/code&gt;对象生命周期的自我管理，其实就是调用者不需要关心&lt;code&gt;InvokeTimer&lt;/code&gt;对象的生命周期问题。可以设想一下，假如&lt;code&gt;InvokeTimer&lt;/code&gt;对象创建后，当定时时间一到，我们就调用其绑定的毁掉回函，然后&lt;code&gt;InvokeTimer&lt;/code&gt;对象自我销毁，是不是就可以实现自我管理了呢？嗯，这个可行。请看下面代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;
// 头文件

#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

struct event_base;

namespace recipes {

class TimerEventWatcher;
class InvokeTimer;

class InvokeTimer {
public:
    typedef std::function&amp;lt;void()&amp;gt; Functor;

    static InvokeTimer* Create(struct event_base* evloop,
                                 double timeout_ms,
                                 const Functor&amp;amp; f);

    ~InvokeTimer();

    void Start();

private:
    InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f);
    void OnTimerTriggered();

private:
    struct event_base* loop_;
    double timeout_ms_;
    Functor functor_;
    std::shared_ptr&amp;lt;TimerEventWatcher&amp;gt; timer_;
};

}


// 实现文件

#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;

#include &amp;lt;thread&amp;gt;
#include &amp;lt;iostream&amp;gt;

namespace recipes {

InvokeTimer::InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f)
    : loop_(evloop), timeout_ms_(timeout_ms), functor_(f) {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

InvokeTimer* InvokeTimer::Create(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f) {
    return new InvokeTimer(evloop, timeout_ms, f);
}

InvokeTimer::~InvokeTimer() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::~InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::Start() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
    timer_.reset(new TimerEventWatcher(loop_, std::bind(&amp;amp;InvokeTimer::OnTimerTriggered, this), timeout_ms_));
    timer_-&amp;gt;Init();
    timer_-&amp;gt;AsyncWait();
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start(AsyncWait) tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; timer=&amp;quot; &amp;lt;&amp;lt; timer_.get() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; timeout(ms)=&amp;quot; &amp;lt;&amp;lt; timeout_ms_ &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::OnTimerTriggered() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnTimerTriggered tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
    functor_();
    functor_ = Functor();
    delete this;
}

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意，上述实现中，为了实现自我销毁，我们必须调用 &lt;strong&gt;delete&lt;/strong&gt; ，这就注定了&lt;code&gt;InvokeTimer&lt;/code&gt;对象必须在堆上创建，因此我们隐藏了它的构造函数，然后用一个静态的 &lt;strong&gt;Create&lt;/strong&gt; 成员来创建&lt;code&gt;InvokeTimer&lt;/code&gt;对象的实例。&lt;/p&gt;

&lt;p&gt;相应的，&lt;code&gt;main.cc&lt;/code&gt;也做了一点点修改代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;
#include &amp;quot;winmain-inl.h&amp;quot;

#include &amp;lt;event2/event.h&amp;gt;

void Print() {
    std::cout &amp;lt;&amp;lt; __FUNCTION__ &amp;lt;&amp;lt; &amp;quot; hello world.&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    struct event_base* base = event_base_new();
    auto timer = recipes::InvokeTimer::Create(base, 1000.0, &amp;amp;Print);
    timer-&amp;gt;Start(); // 启动完成后，就不用关注该对象了
    event_base_dispatch(base);
    event_base_free(base);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个实现，就不需要上层调用者手工&lt;code&gt;delete&lt;/code&gt;这个&lt;code&gt;InvokeTimer&lt;/code&gt;对象的实例，从而达到&lt;code&gt;InvokeTimer&lt;/code&gt;对象自我管理的目的。&lt;/p&gt;

&lt;p&gt;下面编译运行，结果是符合预期的：当timer时间到期后，能顺利触发回调，并且&lt;code&gt;InvokeTimer&lt;/code&gt;对象也自动析构了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ls -l
total 80
-rw-rw-r-- 1 weizili weizili  2729 Apr 15 20:39 event_watcher.cc
-rw-rw-r-- 1 weizili weizili   996 Apr 15 20:39 event_watcher.h
-rw-rw-r-- 1 weizili weizili  1204 Apr 14 10:55 invoke_timer.cc
-rw-rw-r-- 1 weizili weizili   805 Apr 14 10:55 invoke_timer.h
-rw-rw-r-- 1 weizili weizili   374 Apr 14 10:55 main.cc
$ g++ -std=c++11 event_watcher.cc invoke_timer.cc main.cc -levent
$ ./a.out
InvokeTimer::InvokeTimer tid=139965845526336 this=0x7ffd2790f780
InvokeTimer::Start tid=139965845526336 this=0x7ffd2790f780
InvokeTimer::Start(AsyncWait) tid=139965845526336 timer=0x14504c0 this=0x7ffd2790f780 timeout(ms)=1000
InvokeTimer::OnTimerTriggered tid=139965845526336 this=0x7ffd2790f780
Print hello world.
InvokeTimer::~InvokeTimer tid=139965845526336 this=0x7ffd2790f780
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-如果要取消一个定时器怎么办-cancel-03:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;4. 如果要取消一个定时器怎么办：cancel-03&lt;/h1&gt;

&lt;p&gt;上面第2种实现方式，实现了定时器的自我管理，调用者不需要关心定时器的生命周期的管理问题。接下来，新的需求又来了，上层调用者说，在对外发起一个请求时，可以设置一个定时器来处理超时问题，但如果请求及时的回来了，我们得及时取消该定时器啊，这又如何处理呢？&lt;/p&gt;

&lt;p&gt;这就相当于要把上层调用者还得一直保留&lt;code&gt;InvokeTimer&lt;/code&gt;对象的实例，以便在需要的时候，提前取消掉该定时器。上层调用者保留这个指针，就会带来一定的风险，例如误用，当&lt;code&gt;InvokeTimer&lt;/code&gt;对象已经自动析构了，该该指针还继续存在于上层调用者那里。&lt;/p&gt;

&lt;p&gt;于是乎，智能指针&lt;code&gt;shared_ptr&lt;/code&gt;出场了，我们希望上层调用者看到的对象是以&lt;code&gt;shared_ptr&amp;lt;InvokeTimer&amp;gt;&lt;/code&gt;形式存在的，无论上层调用者是否保留这个&lt;code&gt;shared_ptr&amp;lt;InvokeTimer&amp;gt;&lt;/code&gt;对象，&lt;code&gt;InvokeTimer&lt;/code&gt;对象都能自我管理，也就是说，当上层调用者不保留&lt;code&gt;shared_ptr&amp;lt;InvokeTimer&amp;gt;&lt;/code&gt;对象时，&lt;code&gt;InvokeTimer&lt;/code&gt;对象要能自我管理。&lt;/p&gt;

&lt;p&gt;这里就必须让&lt;code&gt;InvokeTimer&lt;/code&gt;对象本身也要保存一份&lt;code&gt;shared_ptr&amp;lt;InvokeTimer&amp;gt;&lt;/code&gt;对象。为了实现这一技术，我们需要引入&lt;code&gt;enable_shared_from_this&lt;/code&gt;。关于&lt;code&gt;enable_shared_from_this&lt;/code&gt;的介绍，网络上已经有很多资料了，这里不多累述。我们直接上最终的实现代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;
// 头文件

#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

struct event_base;

namespace recipes {

class TimerEventWatcher;
class InvokeTimer;

typedef std::shared_ptr&amp;lt;InvokeTimer&amp;gt; InvokeTimerPtr;

class InvokeTimer : public std::enable_shared_from_this&amp;lt;InvokeTimer&amp;gt; {
public:
    typedef std::function&amp;lt;void()&amp;gt; Functor;

    static InvokeTimerPtr Create(struct event_base* evloop,
                                 double timeout_ms,
                                 const Functor&amp;amp; f);

    ~InvokeTimer();

    void Start();

    void Cancel();

    void set_cancel_callback(const Functor&amp;amp; fn) {
        cancel_callback_ = fn;
    }
private:
    InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f);
    void OnTimerTriggered();
    void OnCanceled();

private:
    struct event_base* loop_;
    double timeout_ms_;
    Functor functor_;
    Functor cancel_callback_;
    std::shared_ptr&amp;lt;TimerEventWatcher&amp;gt; timer_;
    std::shared_ptr&amp;lt;InvokeTimer&amp;gt; self_; // Hold myself
};

}


// 实现文件

#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;

#include &amp;lt;thread&amp;gt;
#include &amp;lt;iostream&amp;gt;

namespace recipes {

InvokeTimer::InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f)
    : loop_(evloop), timeout_ms_(timeout_ms), functor_(f) {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

InvokeTimerPtr InvokeTimer::Create(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f) {
    InvokeTimerPtr it(new InvokeTimer(evloop, timeout_ms, f));
    it-&amp;gt;self_ = it;
    return it;
}

InvokeTimer::~InvokeTimer() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::~InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::Start() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; refcount=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; std::endl;
    timer_.reset(new TimerEventWatcher(loop_, std::bind(&amp;amp;InvokeTimer::OnTimerTriggered, shared_from_this()), timeout_ms_));
    timer_-&amp;gt;SetCancelCallback(std::bind(&amp;amp;InvokeTimer::OnCanceled, shared_from_this()));
    timer_-&amp;gt;Init();
    timer_-&amp;gt;AsyncWait();
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::Start(AsyncWait) tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; timer=&amp;quot; &amp;lt;&amp;lt; timer_.get() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; refcount=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; &amp;quot; periodic=&amp;quot; &amp;lt;&amp;lt; periodic_ &amp;lt;&amp;lt; &amp;quot; timeout(ms)=&amp;quot; &amp;lt;&amp;lt; timeout_ms_ &amp;lt;&amp;lt; std::endl;
}

void InvokeTimer::Cancel() {
    if (timer_) {
        timer_-&amp;gt;Cancel();
    }
}

void InvokeTimer::OnTimerTriggered() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnTimerTriggered tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; use_count=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; std::endl;
    functor_();
    functor_ = Functor();
    cancel_callback_ = Functor();
    timer_.reset();
    self_.reset();
}

void InvokeTimer::OnCanceled() {
    std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnCanceled tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; use_count=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; std::endl;
    if (cancel_callback_) {
        cancel_callback_();
        cancel_callback_ = Functor();
    }
    functor_ = Functor();
    timer_.reset();
    self_.reset();
}

}


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相应的，&lt;code&gt;main.cc&lt;/code&gt;也做了一点点修改代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;
#include &amp;quot;winmain-inl.h&amp;quot;

#include &amp;lt;event2/event.h&amp;gt;

void Print() {
    std::cout &amp;lt;&amp;lt; __FUNCTION__ &amp;lt;&amp;lt; &amp;quot; hello world.&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    struct event_base* base = event_base_new();
    auto timer = recipes::InvokeTimer::Create(base, 1000.0, &amp;amp;Print);
    timer-&amp;gt;Start(); // 启动完成后，就不用关注该对象了
    event_base_dispatch(base);
    event_base_free(base);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个实现，就不需要上层调用者手工&lt;code&gt;delete&lt;/code&gt;这个&lt;code&gt;InvokeTimer&lt;/code&gt;对象的实例，从而达到&lt;code&gt;InvokeTimer&lt;/code&gt;对象自我管理的目的。&lt;/p&gt;

&lt;p&gt;下面编译运行，结果是符合预期的：当timer时间到期后，能顺利触发回调，并且&lt;code&gt;InvokeTimer&lt;/code&gt;对象也自动析构了。&lt;/p&gt;

&lt;h1 id=&#34;5-实现一个周期性的定时器-periodic-04:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;5. 实现一个周期性的定时器：periodic-04&lt;/h1&gt;

&lt;p&gt;上述几个实现中，都是一次性的定时器任务。但是如果我们想实现一个周期性的定时器该如何实现呢？例如，我们有一个任务，需要每分钟做一次。&lt;/p&gt;

&lt;p&gt;其实，基于上述第三个版本的实现，可以很容易的实现周期性的定时器功能。只需要在回调函数中，继续调用&lt;code&gt;timer-&amp;gt;AsyncWait()&lt;/code&gt;即可。详细的修改情况如下。&lt;/p&gt;

&lt;p&gt;头文件 invoke_timer.h 改变：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;
@@ -18,7 +18,8 @@ public:

     static InvokeTimerPtr Create(struct event_base* evloop,
                                  double timeout_ms,
-                                 const Functor&amp;amp; f);
+                                 const Functor&amp;amp; f,
+                                 bool periodic);

     ~InvokeTimer();

@@ -30,7 +31,7 @@ public:
         cancel_callback_ = fn;
     }
 private:
-    InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f);
+    InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f, bool periodic);
     void OnTimerTriggered();
     void OnCanceled();

@@ -40,6 +41,7 @@ private:
     Functor functor_;
     Functor cancel_callback_;
     std::shared_ptr&amp;lt;TimerEventWatcher&amp;gt; timer_;
+    bool periodic_;
     std::shared_ptr&amp;lt;InvokeTimer&amp;gt; self_; // Hold myself
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现文件 invoke_timer.cc 改变：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;
 namespace recipes {

-InvokeTimer::InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f)
-    : loop_(evloop), timeout_ms_(timeout_ms), functor_(f) {
+InvokeTimer::InvokeTimer(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f, bool periodic)
+    : loop_(evloop), timeout_ms_(timeout_ms), functor_(f), periodic_(periodic) {
     std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::InvokeTimer tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; std::endl;
 }

-InvokeTimerPtr InvokeTimer::Create(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f) {
-    InvokeTimerPtr it(new InvokeTimer(evloop, timeout_ms, f));
+InvokeTimerPtr InvokeTimer::Create(struct event_base* evloop, double timeout_ms, const Functor&amp;amp; f, bool periodic) {
+    InvokeTimerPtr it(new InvokeTimer(evloop, timeout_ms, f, periodic));
     it-&amp;gt;self_ = it;
     return it;
 }
@@ -27,7 +27,7 @@ void InvokeTimer::Start() {
     timer_-&amp;gt;SetCancelCallback(std::bind(&amp;amp;InvokeTimer::OnCanceled, shared_from_this()));
     timer_-&amp;gt;Init();
     timer_-&amp;gt;AsyncWait();
 }

 void InvokeTimer::Cancel() {
@@ -39,14 +39,20 @@ void InvokeTimer::Cancel() {
 void InvokeTimer::OnTimerTriggered() {
     std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnTimerTriggered tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; use_count=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; std::endl;
     functor_();
-    functor_ = Functor();
-    cancel_callback_ = Functor();
-    timer_.reset();
-    self_.reset();
+
+    if (periodic_) {
+        timer_-&amp;gt;AsyncWait();
+    } else {
+        functor_ = Functor();
+        cancel_callback_ = Functor();
+        timer_.reset();
+        self_.reset();
+    }
 }

 void InvokeTimer::OnCanceled() {
     std::cout &amp;lt;&amp;lt; &amp;quot;InvokeTimer::OnCanceled tid=&amp;quot; &amp;lt;&amp;lt; std::this_thread::get_id() &amp;lt;&amp;lt; &amp;quot; this=&amp;quot; &amp;lt;&amp;lt; this &amp;lt;&amp;lt; &amp;quot; use_count=&amp;quot; &amp;lt;&amp;lt; self_.use_count() &amp;lt;&amp;lt; std::endl;
+    periodic_ = false;
     if (cancel_callback_) {
         cancel_callback_();
         cancel_callback_ = Functor();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;main.cc测试示例代码也有所修改，具体如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;#include &amp;quot;invoke_timer.h&amp;quot;
#include &amp;quot;event_watcher.h&amp;quot;
#include &amp;quot;winmain-inl.h&amp;quot;

#include &amp;lt;event2/event.h&amp;gt;

void Print() {
    std::cout &amp;lt;&amp;lt; __FUNCTION__ &amp;lt;&amp;lt; &amp;quot; hello world.&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    struct event_base* base = event_base_new();
    auto timer = recipes::InvokeTimer::Create(base, 1000.0, &amp;amp;Print, true);
    timer-&amp;gt;Start();
    timer.reset();
    event_base_dispatch(base);
    event_base_free(base);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该版本是最终的实现版本。相关代码都在[&lt;a href=&#34;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer]这里，为了便于演示，其不依赖[evpp]。&#34;&gt;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer]这里，为了便于演示，其不依赖[evpp]。&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;6-最后:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;6. 最后&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;项目官网地址为：&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;https://github.com/Qihoo360/evpp&lt;/a&gt;
本文中的详细代码实现请参考 [&lt;a href=&#34;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer&#34;&gt;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer&lt;/a&gt;]&lt;/p&gt;

&lt;h1 id=&#34;7-evpp系列文章列表:4fb79b78c21aac4725aa913c264ba1ad&#34;&gt;7. evpp系列文章列表&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/zieckey/article/details/69803011&#34;&gt;evpp性能测试（3）: 对无锁队列boost::lockfree::queue和moodycamel::ConcurrentQueue做一个性能对比测试&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/zieckey/article/details/69170619&#34;&gt;evpp性能测试（2）: 与Boost.Asio进行吞吐量对比测试&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/zieckey/article/details/63778715&#34;&gt;evpp性能测试（1）: 与muduo进行吞吐量测试&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/zieckey/article/details/63760757&#34;&gt;发布一个高性能的Reactor模式的C++网络库：evpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer]:https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer&#34;&gt;https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer]:https://github.com/Qihoo360/evpp/tree/master/examples/recipes/self_control_timer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>