<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/docker/</link>
    <description>Recent content in Docker on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Mon, 02 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.codeg.cn/tags/docker/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker介绍及初次使用教程</title>
      <link>http://blog.codeg.cn/2015/02/02/docker-intro/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/2015/02/02/docker-intro/</guid>
      <description>

&lt;h2 id=&#34;介绍:6c78c69223ef2089a4e6ce36812cc20b&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;请参考下列文章：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/docker-core-technology-preview&#34; title=&#34;http://www.infoq.com/cn/articles/docker-core-technology-preview&#34;&gt;深入浅出Docker（一）：Docker核心技术预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhumeng8337797.blog.163.com/blog/static/100768914201452401954833/&#34; title=&#34;http://zhumeng8337797.blog.163.com/blog/static/100768914201452401954833/&#34;&gt;Docker镜像文件（images）的存储结构&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;初次使用:6c78c69223ef2089a4e6ce36812cc20b&#34;&gt;初次使用&lt;/h2&gt;

&lt;h3 id=&#34;实验环境:6c78c69223ef2089a4e6ce36812cc20b&#34;&gt;实验环境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ uname -a
Linux 3.13.0-44-generic #73-Ubuntu SMP Tue Dec 16 00:22:43 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
````

### Docker安装

请参考官方文档[https://docs.docker.com/installation/ubuntulinux/](https://docs.docker.com/installation/ubuntulinux/)，不再累述。

### 下载一个基础镜像

按照官方教程执行`sudo docker run -i -t ubuntu /bin/bash`会得到下列错误：

FATA[0301] Get https://registry-1.docker.io/v1/repositories/library/ubuntu/tags: dial tcp 162.242.195.84:443: connection timed out 

这是我大中华局域网F**K墙的原因，Docker官网镜像源的被墙，只能搭建一个梯子来做代理解决。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sudo stop docker
sudo HTTP_PROXY=&lt;a href=&#34;http://proxy_server:port&#34;&gt;http://proxy_server:port&lt;/a&gt; docker -d &amp;amp;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
先停掉之前启动的docker进程，然后使用环境变量设置代理后启动docker进程。再最后执行`sudo docker run -i -t ubuntu /bin/bash`来下载我们的第一个基础镜像(`base image`)，这个过程有点长，大约半小时吧（视代理速度），然后看到下列信息表明下载成功了。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Status: Downloaded newer image for ubuntu:latest&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### 第一次使用

上一步中命令`sudo docker run -i -t ubuntu /bin/bash`会下载一个基础镜像，并进入docker的执行环境执行`/bin/bash`.
输入`exit`即可退出docker运行环境。

### 构建自己的nginx镜像

我们可以通过Dockerfile来构建镜像。下面是一个示例：

```shell
~$ mkdir -p docker/nginx
~$ cd docker/nginx/
~/docker/nginx$ vim Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在文件中输入下列信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu
MAINTAINER zieckey@codeg.cn
RUN apt-get update
RUN apt-get install -y nginx
RUN echo &#39;Hello, this is responsed from a docker container web server&#39; &amp;gt; /usr/share/nginx/html/index.html
EXPOSE 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行docker build指令来构建镜像 &lt;code&gt;sudo docker build -t=&amp;quot;zieckey/nginx&amp;quot; .&lt;/code&gt; 运行过程如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/docker/nginx$ sudo docker build -t=&amp;quot;zieckey/nginx&amp;quot; .
Sending build context to Docker daemon 2.048 kB
Sending build context to Docker daemon 
Step 0 : FROM ubuntu
 ---&amp;gt; 5ba9dab47459
Step 1 : MAINTAINER zieckey@codeg.cn
 ---&amp;gt; Running in 36aebea12217
 ---&amp;gt; 841ff9c34fd3
Removing intermediate container 36aebea12217
Step 2 : RUN apt-get update
 ---&amp;gt; Running in 098f88fb27b9
Reading package lists...
 ---&amp;gt; 3f3c2f49a178
Removing intermediate container 098f88fb27b9
Step 3 : RUN apt-get install -y nginx
 ---&amp;gt; Running in 0a251800f71c
 ---&amp;gt; dc297e9ab15a
Removing intermediate container 0a251800f71c
Step 4 : RUN echo &#39;Hello, this is responsed from a docker container web server&#39; &amp;gt; /usr/share/nginx/html/index.html
 ---&amp;gt; Running in b158d0bceba4
 ---&amp;gt; b98652380a9a
Removing intermediate container b158d0bceba4
Step 5 : EXPOSE 80
 ---&amp;gt; Running in 5f641c649cc3
 ---&amp;gt; 64925f0a281f
Removing intermediate container 5f641c649cc3
Successfully built 64925f0a281f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到Dockerfile中的每条指令会按顺序执行，而且作为构建过程的最终结果，返回了新的镜像ID，即&lt;code&gt;64925f0a281f&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;看看我们新创建的容器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/docker/nginx$ sudo docker  images zieckey/nginx                     
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
zieckey/nginx       latest              64925f0a281f        About an hour ago   226.9 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，启动新的容器来执行刚刚创建的镜像，这里我们让其启动一个bash程序，这样我们能够更多看到交互过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~$ sudo docker run -i -t zieckey/nginx /bin/bash
root@51d13f1000ba:/# nginx 
root@51d13f1000ba:/# ps aux|grep nginx
root        22  0.0  0.0  85872  1340 ?        Ss   05:43   0:00 nginx: master process nginx
www-data    23  0.0  0.0  86212  1764 ?        S    05:43   0:00 nginx: worker process
www-data    24  0.0  0.0  86212  1764 ?        S    05:43   0:00 nginx: worker process
www-data    25  0.0  0.0  86212  1764 ?        S    05:43   0:00 nginx: worker process
www-data    26  0.0  0.0  86212  1764 ?        S    05:43   0:00 nginx: worker process
root@51d13f1000ba:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:09  
          inet addr:172.17.0.9  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:9/64 Scope:Link
          UP BROADCAST RUNNING  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在另一个shell上执行命令&lt;code&gt;~$ curl http://172.17.0.8/index.html&lt;/code&gt;可以看到屏幕输出&lt;code&gt;Hello, this is responsed from a docker container web server&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;从c源码构建自己的镜像:6c78c69223ef2089a4e6ce36812cc20b&#34;&gt;从C源码构建自己的镜像&lt;/h3&gt;

&lt;p&gt;上面是直接通过apt-get从网络下载一个已经编译好的nginx二进制包来构建我们的镜像，下面我们看看如何通过源代码方式构建我们的自定义的镜像。&lt;/p&gt;

&lt;p&gt;源代码文件main.c:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
int main() {
    printf(&amp;quot;hello world!\n&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu
MAINTAINER zieckey@codeg.cn
ADD ./helloworld /usr/bin/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用下列命令编译c源文件、build Docker镜像、执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/workspace/condiment/docker/helloworld$ gcc -g -Wall main.c -o helloworld
~/workspace/condiment/docker/helloworld$ sudo docker build -t=&amp;quot;zieckey/helloworld&amp;quot; .
Sending build context to Docker daemon 15.36 kB
Sending build context to Docker daemon 
Step 0 : FROM ubuntu
 ---&amp;gt; 5ba9dab47459
Step 1 : MAINTAINER zieckey@codeg.cn
 ---&amp;gt; Using cache
 ---&amp;gt; 841ff9c34fd3
Step 2 : ADD ./helloworld /usr/bin/helloworld
 ---&amp;gt; b3681250409a
Removing intermediate container 208f4598e4e2
Successfully built b3681250409a
~/workspace/condiment/docker/helloworld$ sudo docker run -i -t zieckey/helloworld helloworld
hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述过程的源码在这里&lt;a href=&#34;https://github.com/zieckey/condiment/tree/master/docker/helloworld&#34;&gt;https://github.com/zieckey/condiment/tree/master/docker/helloworld&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考:6c78c69223ef2089a4e6ce36812cc20b&#34;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;《第一本Docker书》&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/installation/ubuntulinux/#ubuntu-trusty-1404-lts-64-bit&#34; title=&#34;https://docs.docker.com/installation/ubuntulinux/#ubuntu-trusty-1404-lts-64-bit&#34;&gt;ubuntu安装指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://my.oschina.net/feedao/blog/223795&#34; title=&#34;http://my.oschina.net/feedao/blog/223795&#34;&gt;Docker使用系列二：CentOS 6.5 制作可以ssh登录的Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>