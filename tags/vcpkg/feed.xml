<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vcpkg on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/vcpkg/</link>
    <description>Recent content in Vcpkg on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Sun, 28 May 2017 18:11:01 +0000</lastBuildDate>
    <atom:link href="http://blog.codeg.cn/tags/vcpkg/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>手把手制作一个vcpkg的安装包及port file相关说明</title>
      <link>http://blog.codeg.cn/post/blog/2017-05-28-how-to-build-a-vcpkg/</link>
      <pubDate>Sun, 28 May 2017 18:11:01 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/blog/2017-05-28-how-to-build-a-vcpkg/</guid>
      <description>

&lt;h1 id=&#34;0-前言:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;0. 前言&lt;/h1&gt;

&lt;p&gt;Windows平台的程序包的依赖管理一直以来都是个大难题。之前有&lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt;，现在有&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;。
本文的重点是先介绍一下&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;的特性，然后以一个实际例子说明，说明如何创建一个&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装包。&lt;/p&gt;

&lt;h1 id=&#34;1-vcpkg-https-github-com-microsoft-vcpkg-简介:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;1. &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;简介&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;是为了在windows平台能够方便获取一个C或者C++库。当前还处于预览版状态。不过已经有很多常见的库了，例如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;openssl&lt;/li&gt;
&lt;li&gt;boost&lt;/li&gt;
&lt;li&gt;zlib&lt;/li&gt;
&lt;li&gt;glog&lt;/li&gt;
&lt;li&gt;libevent&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等等，很多知名的C/C++库都已经提供&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装包。&lt;/p&gt;

&lt;h1 id=&#34;2-vcpkg-https-github-com-microsoft-vcpkg-安装:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;2. &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装&lt;/h1&gt;

&lt;p&gt;首先，我们的windows系统必须安装有下列软件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio 2015 Update 3 or&lt;/li&gt;
&lt;li&gt;Visual Studio 2017&lt;/li&gt;
&lt;li&gt;CMake 3.8.0 or higher (note: downloaded automatically if not found)&lt;/li&gt;
&lt;li&gt;git.exe available in your path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后，我们在windows命令行终端上运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d:\git&amp;gt; git clone https://github.com/Microsoft/vcpkg
d:\git&amp;gt; cd vcpkg
d:\git\vcpkg&amp;gt; .\bootstrap-vcpkg.bat
d:\git\vcpkg&amp;gt; .\vcpkg integrate install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;3-使用-vcpkg-https-github-com-microsoft-vcpkg-获取c-c-库:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;3. 使用&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;获取C/C++库&lt;/h1&gt;

&lt;p&gt;使用&lt;code&gt;vcpkg --help&lt;/code&gt;命令查看联席帮助文档：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg --help
Commands:
  vcpkg search [pat]              Search for packages available to be built
  vcpkg install &amp;lt;pkg&amp;gt;...          Install a package
  vcpkg remove &amp;lt;pkg&amp;gt;...           Uninstall a package
  vcpkg remove --outdated         Uninstall all out-of-date packages
  vcpkg list                      List installed packages
  vcpkg update                    Display list of packages for updating
  vcpkg hash &amp;lt;file&amp;gt; [alg]         Hash a file by specific algorithm, default SHA512

  vcpkg integrate install         Make installed packages available user-wide. Requires admin privileges on first use
  vcpkg integrate remove          Remove user-wide integration
  vcpkg integrate project         Generate a referencing nuget package for individual VS project use

  vcpkg export &amp;lt;pkg&amp;gt;... [opt]...  Exports a package
  vcpkg edit &amp;lt;pkg&amp;gt;                Open up a port for editing (uses %EDITOR%, default &#39;code&#39;)
  vcpkg import &amp;lt;pkg&amp;gt;              Import a pre-built library
  vcpkg create &amp;lt;pkg&amp;gt; &amp;lt;url&amp;gt;
             [archivename]        Create a new package
  vcpkg owns &amp;lt;pat&amp;gt;                Search for files in installed packages
  vcpkg cache                     List cached compiled packages
  vcpkg version                   Display version information
  vcpkg contact                   Display contact information to send feedback

Options:
  --triplet &amp;lt;t&amp;gt;                   Specify the target architecture triplet.
                                  (default: %VCPKG_DEFAULT_TRIPLET%, see &#39;vcpkg help triplet&#39;)

  --vcpkg-root &amp;lt;path&amp;gt;             Specify the vcpkg root directory
                                  (default: %VCPKG_ROOT%)

For more help (including examples) see the accompanying README.md.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们可以看到，很多有用的命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vcpkg search [pattern]

&lt;ul&gt;
&lt;li&gt;搜索一个C/C++库&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;vcpkg install [pkg]

&lt;ul&gt;
&lt;li&gt;安装一个C/C++库&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;vcpkg remove [pkg]

&lt;ul&gt;
&lt;li&gt;卸载(删除)一个C/C++库&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面举例，安装&lt;code&gt;curl&lt;/code&gt;这个常用的C语言写的网络库。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg install curl
The following packages will be built and installed:
    curl:x86-windows
  * libssh2:x86-windows
Additional packages (*) will be installed to complete this operation.
Building package libssh2:x86-windows...
-- CURRENT_INSTALLED_DIR=D:/git/vcpkg/installed/x86-windows
-- DOWNLOADS=D:/git/vcpkg/downloads
-- CURRENT_PACKAGES_DIR=D:/git/vcpkg/packages/libssh2_x86-windows
-- CURRENT_BUILDTREES_DIR=D:/git/vcpkg/buildtrees/libssh2
-- CURRENT_PORT_DIR=D:/git/vcpkg/ports/libssh2/.
-- Downloading https://www.libssh2.org/download/libssh2-1.8.0.tar.gz...
-- Downloading https://www.libssh2.org/download/libssh2-1.8.0.tar.gz... OK
-- Testing integrity of downloaded file...
-- Testing integrity of downloaded file... OK
-- Extracting source D:/git/vcpkg/downloads/libssh2-1.8.0.tar.gz
-- Extracting done
-- Applying patch D:/git/vcpkg/ports/libssh2/0001-Fix-UWP.patch
-- Applying patch D:/git/vcpkg/ports/libssh2/0001-Fix-UWP.patch done
-- Configuring x86-windows-rel
-- Configuring x86-windows-rel done
-- Configuring x86-windows-dbg
-- Configuring x86-windows-dbg done
-- Package x86-windows-rel
-- Package x86-windows-rel done
-- Package x86-windows-dbg
-- Package x86-windows-dbg done
-- Installing: D:/git/vcpkg/packages/libssh2_x86-windows/share/libssh2/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package libssh2:x86-windows... done
Installing package libssh2:x86-windows...
Installing package libssh2:x86-windows... done
Building package curl:x86-windows...
-- CURRENT_INSTALLED_DIR=D:/git/vcpkg/installed/x86-windows
-- DOWNLOADS=D:/git/vcpkg/downloads
-- CURRENT_PACKAGES_DIR=D:/git/vcpkg/packages/curl_x86-windows
-- CURRENT_BUILDTREES_DIR=D:/git/vcpkg/buildtrees/curl
-- CURRENT_PORT_DIR=D:/git/vcpkg/ports/curl/.
-- Downloading https://github.com/curl/curl/archive/curl-7_51_0.tar.gz...
-- Downloading https://github.com/curl/curl/archive/curl-7_51_0.tar.gz... OK
-- Testing integrity of downloaded file...
-- Testing integrity of downloaded file... OK
-- Extracting source D:/git/vcpkg/downloads/curl-7.51.0.tar.gz
-- Extracting done
-- Applying patch D:/git/vcpkg/ports/curl/0001_cmake.patch
-- Applying patch D:/git/vcpkg/ports/curl/0001_cmake.patch done
-- Applying patch D:/git/vcpkg/ports/curl/0002_fix_uwp.patch
-- Applying patch D:/git/vcpkg/ports/curl/0002_fix_uwp.patch done
-- Configuring x86-windows-rel
-- Configuring x86-windows-rel done
-- Configuring x86-windows-dbg
-- Configuring x86-windows-dbg done
-- Package x86-windows-rel
-- Package x86-windows-rel done
-- Package x86-windows-dbg
-- Package x86-windows-dbg done
-- Installing: D:/git/vcpkg/packages/curl_x86-windows/share/curl/copyright
-- Performing post-build validation
-- Performing post-build validation done
Building package curl:x86-windows... done
Installing package curl:x86-windows...
Installing package curl:x86-windows... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，安装&lt;code&gt;curl&lt;/code&gt;所需的依赖安装包&lt;code&gt;libssh2&lt;/code&gt;也被自动安装处理好了。这类似与Linux系统下面的&lt;code&gt;yum&lt;/code&gt;工具，自动处理rpm包的依赖关系，非常棒。&lt;/p&gt;

&lt;p&gt;安装x64版本时，只需要在包名后面追加&lt;code&gt;:x64-windows&lt;/code&gt;即可，例如 &lt;code&gt;curl:x64-windows&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg install curl:x64-windows
The following packages will be built and installed:
    curl:x64-windows
  * libssh2:x64-windows
Additional packages (*) will be installed to complete this operation.
Building package zlib:x64-windows...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-step-by-step-手把手教你如何制作一个-vcpkg-https-github-com-microsoft-vcpkg-安装包:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;4. Step by step 手把手教你如何制作一个&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装包&lt;/h1&gt;

&lt;h4 id=&#34;a-创建一个c库项目:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;a) 创建一个C库项目&lt;/h4&gt;

&lt;p&gt;这里我们直接创建项目 &lt;a href=&#34;https://github.com/zieckey/vcpkgdemo&#34;&gt;https://github.com/zieckey/vcpkgdemo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后提交了一些简单的代码及 CMakeLists.txt。并打了一个tag 1.0。从而我们得到一个该项目源码的现在的地址 &lt;a href=&#34;https://github.com/zieckey/vcpkgdemo/archive/1.0.zip&#34;&gt;https://github.com/zieckey/vcpkgdemo/archive/1.0.zip&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;b-从源头开始创建一个-vcpkg-https-github-com-microsoft-vcpkg-安装包项目-bootstrap-with-create:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;b) 从源头开始创建一个&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装包项目：Bootstrap with create&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg create vcpkgdemo https://github.com/zieckey/vcpkgdemo/archive/1.0.zip vcpkgdemo-1.0.zip
-- Generated portfile: D:\git\vcpkg\ports\vcpkgdemo\portfile.cmake
-- Generated CONTROL: D:\git\vcpkg\ports\vcpkgdemo\CONTROL
-- To launch an editor for these new files, run
--     .\vcpkg edit vcpkgdemo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到，在&lt;code&gt;D:\git\vcpkg\ports\&lt;/code&gt;目录下多出一个&lt;code&gt;vcpkgdemo&lt;/code&gt;目录，并且目录下有两个文件&lt;code&gt;portfile.cmake&lt;/code&gt;和&lt;code&gt;CONTROL&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;c-定制-control-文件:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;c) 定制&lt;code&gt;CONTROL&lt;/code&gt;文件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;CONTROL&lt;/code&gt;文件原始内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: vcpkgdemo
Version:
Description:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们修改为下面内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: vcpkgdemo
Version: 1.0
Description: A demo to show how to create a vcpkg package
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;d-定制-portfile-cmake-文件:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;d) 定制&lt;code&gt;portfile.cmake&lt;/code&gt;文件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;portfile.cmake&lt;/code&gt;文件原始内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Common Ambient Variables:
#   CURRENT_BUILDTREES_DIR    = ${VCPKG_ROOT_DIR}\buildtrees\${PORT}
#   CURRENT_PACKAGES_DIR      = ${VCPKG_ROOT_DIR}\packages\${PORT}_${TARGET_TRIPLET}
#   CURRENT_PORT DIR          = ${VCPKG_ROOT_DIR}\ports\${PORT}
#   PORT                      = current port name (zlib, etc)
#   TARGET_TRIPLET            = current triplet (x86-windows, x64-windows-static, etc)
#   VCPKG_CRT_LINKAGE         = C runtime linkage type (static, dynamic)
#   VCPKG_LIBRARY_LINKAGE     = target library linkage type (static, dynamic)
#   VCPKG_ROOT_DIR            = &amp;lt;C:\path\to\current\vcpkg&amp;gt;
#   VCPKG_TARGET_ARCHITECTURE = target architecture (x64, x86, arm)
#

include(vcpkg_common_functions)
set(SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/vcpkgdemo-1.0)
vcpkg_download_distfile(ARCHIVE
    URLS &amp;quot;https://github.com/zieckey/vcpkgdemo/archive/1.0.zip&amp;quot;
    FILENAME &amp;quot;vcpkgdemo-1.0.zip&amp;quot;
    SHA512 8805850856abdd39afdafa78dbd3a9e1d57d1a19a97579facf4571a0980799483574163e5f9a877a1fa38d541b7a0820c8ae7db61ae896803a8f89c5c22e386a
)
vcpkg_extract_source_archive(${ARCHIVE})

vcpkg_configure_cmake(
    SOURCE_PATH ${SOURCE_PATH}
    PREFER_NINJA # Disable this option if project cannot be built with Ninja
    # OPTIONS -DUSE_THIS_IN_ALL_BUILDS=1 -DUSE_THIS_TOO=2
    # OPTIONS_RELEASE -DOPTIMIZE=1
    # OPTIONS_DEBUG -DDEBUGGABLE=1
)

vcpkg_install_cmake()

# Handle copyright
#file(COPY ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo)
#file(RENAME ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo/LICENSE ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo/copyright)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们将其修改为下面内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include(vcpkg_common_functions)
set(SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/vcpkgdemo-1.0)
vcpkg_download_distfile(ARCHIVE
    URLS &amp;quot;https://github.com/zieckey/vcpkgdemo/archive/1.0.zip&amp;quot;
    FILENAME &amp;quot;vcpkgdemo-1.0.zip&amp;quot;
    SHA512 5b526b848c05d9b30eac8aede6c6c19591baf45e601c54ed6a0aa40ae3f11545d9648f332fb991f9540e44cfc3fc3ea6dd6db3b6c9d8e076b74af08e9ac69740
)

message(STATUS &amp;quot;Begin to extract files ...&amp;quot;)
vcpkg_extract_source_archive(${ARCHIVE})

message(STATUS &amp;quot;Building vcpkgdemo project ...&amp;quot;)

vcpkg_configure_cmake(
    SOURCE_PATH ${SOURCE_PATH}
    OPTIONS -DCMAKE_TOOLCHAIN_FILE=D:/git/vcpkg/scripts/buildsystems/vcpkg.cmake -DEVPP_VCPKG_BUILD=ON
)

vcpkg_install_cmake()
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/share)
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo)

#remove duplicated files
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/include)

# remove not used cmake files
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/share )
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/lib/cmake )
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/lib/cmake )

# Handle copyright
file(COPY ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo)
file(RENAME ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo/LICENSE ${CURRENT_PACKAGES_DIR}/share/vcpkgdemo/copyright)

message(STATUS &amp;quot;Installing done&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;e-测试:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;e) 测试&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg install vcpkgdemo
The following packages will be built and installed:
    vcpkgdemo:x86-windows
Building package vcpkgdemo:x86-windows...
-- CURRENT_INSTALLED_DIR=D:/git/vcpkg/installed/x86-windows
-- DOWNLOADS=D:/git/vcpkg/downloads
-- CURRENT_PACKAGES_DIR=D:/git/vcpkg/packages/vcpkgdemo_x86-windows
-- CURRENT_BUILDTREES_DIR=D:/git/vcpkg/buildtrees/vcpkgdemo
-- CURRENT_PORT_DIR=D:/git/vcpkg/ports/vcpkgdemo/.
-- Using cached D:/git/vcpkg/downloads/vcpkgdemo-1.0.zip
-- Testing integrity of cached file...
-- Testing integrity of cached file... OK
-- Begin to extract files ...
-- Extracting source D:/git/vcpkg/downloads/vcpkgdemo-1.0.zip
-- Extracting done
-- Building vcpkgdemo project ...
-- Configuring x86-windows-rel
-- Configuring x86-windows-rel done
-- Configuring x86-windows-dbg
-- Configuring x86-windows-dbg done
-- Package x86-windows-rel
-- Package x86-windows-rel done
-- Package x86-windows-dbg
-- Package x86-windows-dbg done
-- Installing done
-- Performing post-build validation
-- Performing post-build validation done
Building package vcpkgdemo:x86-windows... done
Installing package vcpkgdemo:x86-windows...
Installing package vcpkgdemo:x86-windows... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不顺利，有错误发生的话，可以根据错误提示去 &lt;code&gt;D:/git/vcpkg/buildtrees/vcpkgdemo&lt;/code&gt; 找错误日志，并解决。&lt;/p&gt;

&lt;h4 id=&#34;f-将-d-git-vcpkg-ports-vcpkgdemo-整个目录提交到-https-github-com-microsoft-vcpkg-https-github-com-microsoft-vcpkg:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;f) 将&lt;code&gt;D:\git\vcpkg\ports\vcpkgdemo&lt;/code&gt;整个目录提交到&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;https://github.com/Microsoft/vcpkg&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;为了让这个vcpkg包能够被其世界上任何他人使用，我们必须将port file提交到&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;https://github.com/Microsoft/vcpkg&lt;/a&gt;项目中。&lt;/p&gt;

&lt;p&gt;也就是我们需要发起一个Pull Request到&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;的官方github地址 &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;https://github.com/Microsoft/vcpkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里不再累述。&lt;/p&gt;

&lt;h1 id=&#34;5-step-by-step-手把手教你如何制作一个-vcpkg-https-github-com-microsoft-vcpkg-安装包-实际案例:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;5. Step by step 手把手教你如何制作一个&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;安装包：实际案例&lt;/h1&gt;

&lt;p&gt;这里我们以&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;项目为例。&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;是一个基于&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;开发的现代化C++11高性能网络服务器，自带TCP/UDP/HTTP等协议的异步非阻塞式的服务器和客户端库。&lt;/p&gt;

&lt;h4 id=&#34;第1步-从源头开始创建一个项目-bootstrap-with-create:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;第1步：从源头开始创建一个项目：Bootstrap with create&lt;/h4&gt;

&lt;p&gt;首先，我们需要有一个网络上可供下载的安装包地址，在这里我们选择 &lt;a href=&#34;https://github.com/Qihoo360/evpp/archive/v0.5.0.zip&#34;&gt;https://github.com/Qihoo360/evpp/archive/v0.5.0.zip&lt;/a&gt;
然后，我们需要为项目取一个好记的名字，最好是小写字母，这里我们选择 &lt;code&gt;evpp&lt;/code&gt;
最后，使用&lt;code&gt;vcpkg create&lt;/code&gt;创建一个项目模板&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg create evpp https://github.com/Qihoo360/evpp/archive/v0.5.0.zip evpp-0.5.0.zip
-- Generated portfile: D:\git\vcpkg\ports\evpp\portfile.cmake
-- Generated CONTROL: D:\git\vcpkg\ports\evpp\CONTROL
-- To launch an editor for these new files, run
--     .\vcpkg edit evpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到，在&lt;code&gt;D:\git\vcpkg\ports\&lt;/code&gt;目录下多出一个&lt;code&gt;evpp&lt;/code&gt;目录，并且目录下有两个文件&lt;code&gt;portfile.cmake&lt;/code&gt;和&lt;code&gt;CONTROL&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;第2步-定制-control-文件:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;第2步：定制&lt;code&gt;CONTROL&lt;/code&gt;文件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;CONTROL&lt;/code&gt;文件原始内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: evpp
Version:
Description:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们修改为下面内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Source: evpp
Version: 0.5.0
Description: A modern C++ network library based on libevent for developing high performance network services in TCP/UDP/HTTP protocols.
Build-Depends: glog, libevent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意上面的依赖库写法，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;依赖两个项目 &lt;a href=&#34;https://github.com/google/glog&#34;&gt;glog&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;，所以写法是 &lt;code&gt;Build-Depends: glog, libevent&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;第3步-定制-portfile-cmake-文件:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;第3步：定制&lt;code&gt;portfile.cmake&lt;/code&gt;文件&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;portfile.cmake&lt;/code&gt;文件原始内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Common Ambient Variables:
#   CURRENT_BUILDTREES_DIR    = ${VCPKG_ROOT_DIR}\buildtrees\${PORT}
#   CURRENT_PACKAGES_DIR      = ${VCPKG_ROOT_DIR}\packages\${PORT}_${TARGET_TRIPLET}
#   CURRENT_PORT DIR          = ${VCPKG_ROOT_DIR}\ports\${PORT}
#   PORT                      = current port name (zlib, etc)
#   TARGET_TRIPLET            = current triplet (x86-windows, x64-windows-static, etc)
#   VCPKG_CRT_LINKAGE         = C runtime linkage type (static, dynamic)
#   VCPKG_LIBRARY_LINKAGE     = target library linkage type (static, dynamic)
#   VCPKG_ROOT_DIR            = &amp;lt;C:\path\to\current\vcpkg&amp;gt;
#   VCPKG_TARGET_ARCHITECTURE = target architecture (x64, x86, arm)
#

include(vcpkg_common_functions)
set(SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/evpp-0.5.0)
vcpkg_download_distfile(ARCHIVE
    URLS &amp;quot;https://github.com/Qihoo360/evpp/archive/v0.5.0.zip&amp;quot;
    FILENAME &amp;quot;evpp-0.5.0.zip&amp;quot;
    SHA512 fce8ebfec8b22b137f827a886f9ef658d70e060cef3950600ac42136d87cdd9357d78897348ed1d1c112c5e04350626fb218b02cba190a2c2a6fb81136eb2d7d
)
vcpkg_extract_source_archive(${ARCHIVE})

vcpkg_configure_cmake(
    SOURCE_PATH ${SOURCE_PATH}
    PREFER_NINJA # Disable this option if project cannot be built with Ninja
    # OPTIONS -DUSE_THIS_IN_ALL_BUILDS=1 -DUSE_THIS_TOO=2
    # OPTIONS_RELEASE -DOPTIMIZE=1
    # OPTIONS_DEBUG -DDEBUGGABLE=1
)

vcpkg_install_cmake()

# Handle copyright
#file(COPY ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/evpp)
#file(RENAME ${CURRENT_PACKAGES_DIR}/share/evpp/LICENSE ${CURRENT_PACKAGES_DIR}/share/evpp/copyright)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们将其修改为下面内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include(vcpkg_common_functions)

set(EVPP_VERSION 0.5.0)
set(EVPP_HASH fce8ebfec8b22b137f827a886f9ef658d70e060cef3950600ac42136d87cdd9357d78897348ed1d1c112c5e04350626fb218b02cba190a2c2a6fb81136eb2d7d)
set(SOURCE_PATH ${CURRENT_BUILDTREES_DIR}/src/evpp-${EVPP_VERSION})
vcpkg_download_distfile(ARCHIVE
    URLS &amp;quot;https://github.com/Qihoo360/evpp/archive/v${EVPP_VERSION}.zip&amp;quot;
    FILENAME &amp;quot;evpp-${EVPP_VERSION}.zip&amp;quot;
    SHA512 ${EVPP_HASH}
)


message(STATUS &amp;quot;Begin to extract files ...&amp;quot;)
vcpkg_extract_source_archive(${ARCHIVE})

message(STATUS &amp;quot;Building evpp project ...&amp;quot;)

vcpkg_configure_cmake(
    SOURCE_PATH ${SOURCE_PATH}
    OPTIONS -DCMAKE_TOOLCHAIN_FILE=D:/git/vcpkg/scripts/buildsystems/vcpkg.cmake -DEVPP_VCPKG_BUILD=ON
)

vcpkg_install_cmake()
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/share)
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/share/evpp)

#remove duplicated files
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/include)

# remove not used cmake files
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/share )
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/lib/cmake )
file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/lib/cmake )

# Handle copyright
file(COPY ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/evpp)
file(RENAME ${CURRENT_PACKAGES_DIR}/share/evpp/LICENSE ${CURRENT_PACKAGES_DIR}/share/evpp/copyright)

message(STATUS &amp;quot;Installing done&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第4步-测试:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;第4步：测试&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;D:\git\vcpkg&amp;gt;.\vcpkg install evpp
The following packages will be built and installed:
    evpp:x86-windows
Building package evpp:x86-windows...
-- CURRENT_INSTALLED_DIR=D:/git/vcpkg/installed/x86-windows
-- DOWNLOADS=D:/git/vcpkg/downloads
-- CURRENT_PACKAGES_DIR=D:/git/vcpkg/packages/evpp_x86-windows
-- CURRENT_BUILDTREES_DIR=D:/git/vcpkg/buildtrees/evpp
-- CURRENT_PORT_DIR=D:/git/vcpkg/ports/evpp/.
-- Using cached D:/git/vcpkg/downloads/evpp-0.5.0.zip
-- Testing integrity of cached file...
-- Testing integrity of cached file... OK
-- Begin to extract files ...
-- Extracting done
-- Building evpp project ...
-- Configuring x86-windows-rel
-- Configuring x86-windows-rel done
-- Configuring x86-windows-dbg
-- Configuring x86-windows-dbg done
-- Package x86-windows-rel
-- Package x86-windows-rel done
-- Package x86-windows-dbg
-- Package x86-windows-dbg done
-- Installing done
-- Performing post-build validation
-- Performing post-build validation done
Building package evpp:x86-windows... done
Installing package evpp:x86-windows...
Installing package evpp:x86-windows... done
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;第5步-将-d-git-vcpkg-ports-evpp-整个目录提交到-https-github-com-microsoft-vcpkg-https-github-com-microsoft-vcpkg:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;第5步：将&lt;code&gt;D:\git\vcpkg\ports\evpp&lt;/code&gt;整个目录提交到&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;https://github.com/Microsoft/vcpkg&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;也就是我们需要发起一个Pull Request到&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;的官方github地址 &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;https://github.com/Microsoft/vcpkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里不再累述。&lt;/p&gt;

&lt;h1 id=&#34;6-最后:d5b1c64b04f5a3ca42b256b2911d82e8&#34;&gt;6. 最后&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;项目官网地址为：&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;https://github.com/Qihoo360/evpp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为&lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;制作的安装包，已经提交Pull Request ：&lt;a href=&#34;https://github.com/Microsoft/vcpkg/pull/1177&#34;&gt;https://github.com/Microsoft/vcpkg/pull/1177&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zieckey/vcpkgdemo&#34;&gt;vcpkgdemo&lt;/a&gt;的原始代码请见 &lt;a href=&#34;https://github.com/zieckey/vcpkgdemo&#34;&gt;https://github.com/zieckey/vcpkgdemo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>