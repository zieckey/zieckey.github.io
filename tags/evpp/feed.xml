<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Evpp on CodeG Blog</title>
    <link>http://blog.codeg.cn/tags/evpp/</link>
    <description>Recent content in Evpp on CodeG Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2015. All rights reserved.</copyright>
    <lastBuildDate>Tue, 14 Mar 2017 18:13:00 +0000</lastBuildDate>
    <atom:link href="http://blog.codeg.cn/tags/evpp/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>evpp与muduo吞吐量对比</title>
      <link>http://blog.codeg.cn/post/blog/2017-03-14-the-throughput-benchmark-test-of-evpp-vs-muduo/</link>
      <pubDate>Tue, 14 Mar 2017 18:13:00 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/blog/2017-03-14-the-throughput-benchmark-test-of-evpp-vs-muduo/</guid>
      <description>

&lt;h3 id=&#34;简介:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;是最近几年中国开源界里产生的优秀作品。它是由业内大牛陈硕实现的。详细介绍，请参考其博客介绍&lt;a href=&#34;http://blog.csdn.net/solstice/article/details/5848547&#34;&gt;http://blog.csdn.net/solstice/article/details/5848547&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本次测试是参考陈硕的博客文章&lt;a href=&#34;http://blog.csdn.net/solstice/article/details/5864889&#34;&gt;muduo与libevent2吞吐量对比&lt;/a&gt;，该文章的结论是：&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;吞吐量平均比&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;高 &lt;strong&gt;18%&lt;/strong&gt; 以上。&lt;/p&gt;

&lt;p&gt;由于&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;本身是基于&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;实现的，因此我们希望将&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;和&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;放到一起做一次全面的性能测试。本文是关于这两个库在吞吐量方面的测试。&lt;/p&gt;

&lt;h3 id=&#34;测试对象:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;测试对象&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp/archive/v0.2.4.zip&#34;&gt;evpp-v0.2.4&lt;/a&gt; based on libevent-2.0.21&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chenshuo/muduo/archive/v1.0.9.zip&#34;&gt;muduo-v1.0.9&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;测试环境:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;测试环境&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Linux CentOS 6.2, 2.6.32-220.7.1.el6.x86_64&lt;/li&gt;
&lt;li&gt;Intel&amp;reg; Xeon&amp;reg; CPU E5-2630 v2 @ 2.60GHz&lt;/li&gt;
&lt;li&gt;gcc version 4.8.2 20140120 (Red Hat 4.8.2-15) (GCC)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;测试方法:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;测试方法&lt;/h3&gt;

&lt;p&gt;依据 boost.asio 性能测试 &lt;a href=&#34;http://think-async.com/Asio/LinuxPerformanceImprovements&#34;&gt;http://think-async.com/Asio/LinuxPerformanceImprovements&lt;/a&gt; 的办法，用 ping pong 协议来测试吞吐量。&lt;/p&gt;

&lt;p&gt;简单地说，ping pong 协议是客户端和服务器都实现 echo 协议。当 TCP 连接建立时，客户端向服务器发送一些数据，服务器会 echo 回这些数据，然后客户端再 echo 回服务器。这些数据就会像乒乓球一样在客户端和服务器之间来回传送，直到有一方断开连接为止。这是用来测试吞吐量的常用办法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;的测试代码在软件包内的路径为 &lt;code&gt;examples/pingpong/&lt;/code&gt;，代码如&lt;a href=&#34;https://github.com/chenshuo/muduo/tree/master/examples/pingpong&#34;&gt;https://github.com/chenshuo/muduo/tree/master/examples/pingpong&lt;/a&gt;所示。并使用&lt;code&gt;BUILD_TYPE=release ./build.sh&lt;/code&gt;方式编译&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;的优化版本。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;的测试代码在软件包内的路径为&lt;code&gt;benchmark/throughput/evpp&lt;/code&gt;，代码如&lt;a href=&#34;https://github.com/Qihoo360/evpp/tree/master/benchmark/throughput/evpp&#34;&gt;https://github.com/Qihoo360/evpp/tree/master/benchmark/throughput/evpp&lt;/a&gt;所示。并使用 &lt;code&gt;tools&lt;/code&gt;目录下的&lt;code&gt;benchmark-build.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们做了下面两项测试：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;单线程测试，测试并发连接数为 1/10/100/1000/10000 时，消息大小分别为 4096 8192 81920 409600 时的吞吐量&lt;/li&gt;
&lt;li&gt;多线程测试，并发连接数为 100 或 1000，服务器和客户端的线程数同时设为 2/3/4/6/8，ping pong 消息的大小为 16k bytes。测试用的 shell 脚本可从&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;的源码包中找到。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;单线程测试结果数据:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;单线程测试结果数据&lt;/h3&gt;

&lt;p&gt;最终测试结论如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在吞吐量方面的性能总体来说，比较接近，各擅胜场&lt;/li&gt;
&lt;li&gt;在单个消息较大时（&amp;gt;81K)，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;比&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;整体上更快&lt;/li&gt;
&lt;li&gt;在单个消息不太大时，并发数小于1000时，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;占优&lt;/li&gt;
&lt;li&gt;在单个消息不太大时，并发数大于1000时，&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;占优&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;测试中，单个消息较大时，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;比&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;整体上更快的结论，我们认为是与&lt;code&gt;Buffer&lt;/code&gt;类的设计实现有关。&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;的&lt;code&gt;Buffer&lt;/code&gt;类是自己人肉实现的内存管理，而&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;的&lt;code&gt;Buffer&lt;/code&gt;类的底层是用&lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt;实现的，我们推测&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;的这个实现性能方面稍差。本次吞吐量测试中，主要的开销是网络IO事件的触发回调和数据读写，当消息size不太大时，网络IO的事件触发耗费CPU更多；当消息size较大时，数据的读写和拷贝占用更多CPU。当然这只是一个推测，后面如果有时间或大家感兴趣，可以自行验证两个库的&lt;code&gt;Buffer&lt;/code&gt;类的操作性能。&lt;/p&gt;

&lt;p&gt;这个测试结果进一步推断，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;比&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;更快（因为&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;吞吐量平均比&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;高 &lt;strong&gt;18%&lt;/strong&gt; 以上），表面上看不符合逻辑，因为&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;的底层就是&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;，但仔细分析发现，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;只是用了&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;核心的事件循环，并没有用&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent2&lt;/a&gt;中的&lt;code&gt;evbuffer&lt;/code&gt;相关类和函数来读写网络数据，而是借鉴&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;和&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;实现了自己独立的[Buffer]类来读写网络数据。&lt;/p&gt;

&lt;p&gt;下面是具体的测试数据和图表。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Message Size&lt;/th&gt;
&lt;th&gt;1 connection&lt;/th&gt;
&lt;th&gt;10 connections&lt;/th&gt;
&lt;th&gt;100 connections&lt;/th&gt;
&lt;th&gt;1000 connections&lt;/th&gt;
&lt;th&gt;10000 connections&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;evpp&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;229.274&lt;/td&gt;
&lt;td&gt;631.611&lt;/td&gt;
&lt;td&gt;671.219&lt;/td&gt;
&lt;td&gt;495.566&lt;/td&gt;
&lt;td&gt;366.071&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;muduo&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;222.117&lt;/td&gt;
&lt;td&gt;609.152&lt;/td&gt;
&lt;td&gt;631.119&lt;/td&gt;
&lt;td&gt;514.235&lt;/td&gt;
&lt;td&gt;365.959&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;evpp&lt;/td&gt;
&lt;td&gt;8192&lt;/td&gt;
&lt;td&gt;394.162&lt;/td&gt;
&lt;td&gt;1079.67&lt;/td&gt;
&lt;td&gt;1127.09&lt;/td&gt;
&lt;td&gt;786.706&lt;/td&gt;
&lt;td&gt;645.866&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;muduo&lt;/td&gt;
&lt;td&gt;8192&lt;/td&gt;
&lt;td&gt;393.683&lt;/td&gt;
&lt;td&gt;1064.43&lt;/td&gt;
&lt;td&gt;1103.02&lt;/td&gt;
&lt;td&gt;815.269&lt;/td&gt;
&lt;td&gt;670.503&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;evpp&lt;/td&gt;
&lt;td&gt;81920&lt;/td&gt;
&lt;td&gt;1565.22&lt;/td&gt;
&lt;td&gt;2079.77&lt;/td&gt;
&lt;td&gt;1464.16&lt;/td&gt;
&lt;td&gt;1323.09&lt;/td&gt;
&lt;td&gt;1297.18&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;muduo&lt;/td&gt;
&lt;td&gt;81920&lt;/td&gt;
&lt;td&gt;1567.959&lt;/td&gt;
&lt;td&gt;2180.467&lt;/td&gt;
&lt;td&gt;1432.009&lt;/td&gt;
&lt;td&gt;1267.181&lt;/td&gt;
&lt;td&gt;1159.278&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;evpp&lt;/td&gt;
&lt;td&gt;409600&lt;/td&gt;
&lt;td&gt;1950.79&lt;/td&gt;
&lt;td&gt;2363.68&lt;/td&gt;
&lt;td&gt;1528.97&lt;/td&gt;
&lt;td&gt;1290.17&lt;/td&gt;
&lt;td&gt;1039.96&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;muduo&lt;/td&gt;
&lt;td&gt;409600&lt;/td&gt;
&lt;td&gt;1887.057&lt;/td&gt;
&lt;td&gt;2213.813&lt;/td&gt;
&lt;td&gt;1305.899&lt;/td&gt;
&lt;td&gt;1131.383&lt;/td&gt;
&lt;td&gt;1043.612&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们用&lt;a href=&#34;https://github.com/zieckey/gochart&#34;&gt;https://github.com/zieckey/gochart&lt;/a&gt;这个图表绘制工具将上述数据绘制为图表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/1thread-4096-evpp-vs-muduo.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/1thread-8192-evpp-vs-muduo.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/1thread-81920-evpp-vs-muduo.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/1thread-409600-evpp-vs-muduo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;多线程测试结果:251aeffb3a5bb5eef7cdbb7cd5914ca7&#34;&gt;多线程测试结果&lt;/h3&gt;

&lt;p&gt;测试结论如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在多线程场景下，&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;和&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;两个库在吞吐量方面，的性能整体上来看没有明显区别，分阶段分别领先&lt;/li&gt;
&lt;li&gt;100并发连接比1000并发连接测试，两个库的吞吐量都明显的高得多&lt;/li&gt;
&lt;li&gt;在100并发连接测试下，随着线程数的增长，吞吐量基本上是线性增长。&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;库在中段领先于&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;，但在前期和后期又弱于&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在1000并发连接测试下，随着线程数的增长，前期基本上是线性增长，后期增长乏力。&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;库这方面表现尤其明显&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/multi-thread-evpp-vs-muduo.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;[Buffer]:&lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/buffer.h&#34;&gt;https://github.com/Qihoo360/evpp/blob/master/evpp/buffer.h&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>发布一个高性能的Reactor模式的C&#43;&#43;网络库：evpp</title>
      <link>http://blog.codeg.cn/post/blog/2017-03-13-release-a-high-performance-C&#43;&#43;11-network-library/</link>
      <pubDate>Mon, 13 Mar 2017 18:13:00 +0000</pubDate>
      
      <guid>http://blog.codeg.cn/post/blog/2017-03-13-release-a-high-performance-C&#43;&#43;11-network-library/</guid>
      <description>

&lt;h2 id=&#34;简介:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;是一个基于&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;开发的现代化的支持C++11特性的高性能网络库，自带TCP/UDP/HTTP等协议的异步非阻塞式的服务器和客户端库。&lt;/p&gt;

&lt;h2 id=&#34;特性:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;特性&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;现代版的C++11接口&lt;/li&gt;
&lt;li&gt;非阻塞异步接口都是C++11的functional/bind形式的回调仿函数（不是&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;中的C风格的函数指针）&lt;/li&gt;
&lt;li&gt;非阻塞纯异步多线程TCP服务器/客户端&lt;/li&gt;
&lt;li&gt;非阻塞纯异步多线程HTTP服务器/客户端&lt;/li&gt;
&lt;li&gt;非阻塞纯异步多线程UDP服务器&lt;/li&gt;
&lt;li&gt;支持多进程模式&lt;/li&gt;
&lt;li&gt;优秀的跨平台特性和高性能（继承自&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;的优点）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;除此之外，基于该库之上，还提供两个附带的应用层协议库：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;evmc&lt;/code&gt; ：一个纯异步非阻塞式的&lt;code&gt;memcached&lt;/code&gt;的C++客户端库，支持&lt;code&gt;membase&lt;/code&gt;集群模式。该库已经用于生产环境，每天发起1000多&lt;strong&gt;亿&lt;/strong&gt;次memcache查询请求。详情请见：&lt;a href=&#34;http://blog.codeg.cn/apps/evmc/readme.md&#34;&gt;evmc readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evnsq&lt;/code&gt; ： 一个纯异步非阻塞式的&lt;code&gt;NSQ&lt;/code&gt;的C++客户端库，支持消费者、生产者、服务发现等特性。该库已经用于生产环境，每天生产200多&lt;strong&gt;亿&lt;/strong&gt;条日志消息。详情请见：&lt;a href=&#34;http://blog.codeg.cn/apps/evnsq/readme.md&#34;&gt;evnsq readme&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;将来还会推出&lt;code&gt;redis&lt;/code&gt;的客户端库。&lt;/p&gt;

&lt;h2 id=&#34;项目由来:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;项目由来&lt;/h2&gt;

&lt;p&gt;我们开发小组负责的业务需要用到TCP协议来建设长连接网关服务和一些其他的一些基于TCP的短连接服务，在调研开源项目的过程中，没有发现一个合适的库来满足我们要求。结合我们自身的业务情况，理想中的C++网络库应具备一下几个特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;接口简单易用，最好是C++接口&lt;/li&gt;
&lt;li&gt;多线程，也能支持多进程&lt;/li&gt;
&lt;li&gt;最好是基于&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;实现（因为现有的历史遗留框架、基础库等是依赖&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;），这样能很方便嵌入&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;的事件循环，否则改动较大或者集成起来的程序可能会有很多跨线程的调用（这些会带来编程的复杂性以及跨线程锁带来的性能下降）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于这些需求，可供选择的不多，所以我们只能自己开发一个。开发过程中，接口设计方面基本上大部分是参考&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;项目来设计和实现的，当然也做了一些取舍和增改；同时也大量借鉴了&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;的一些设计哲学和思想。下面举几个小例子来说明一下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Duration&lt;/code&gt; ： 这是一个时间区间相关的类，自带时间单位信息，参考了&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;项目中的&lt;code&gt;Duration&lt;/code&gt;实现。我们在其他项目中见到太多的时间是不带单位的，例如&lt;code&gt;timeout&lt;/code&gt;，到底是秒、毫秒还是微秒？需要看文档说明或具体实现，好一点的设计会将单位带在变量名中，例如&lt;code&gt;timeout_ms&lt;/code&gt;，但还是没有&lt;code&gt;Duration&lt;/code&gt;这种独立的类好。目前C++11中也有类似的实现&lt;code&gt;std::chrono::duration&lt;/code&gt;，但稍显复杂，没有咱们这个借鉴&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;实现的版本来的简单明了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buffer&lt;/code&gt; ： 这是一个缓冲区类，融合了&lt;code&gt;muduo&lt;/code&gt;和&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;两个项目中相关类的设计和实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http::Server&lt;/code&gt; : 这是一个http服务器类，自带线程池，它的事件循环和工作线程调度，完全是线程安全的，业务层不用太多关心跨线程调用问题。同时，还将http服务器的核心功能单独抽取出来形成&lt;code&gt;http::Service&lt;/code&gt;类，是一个可嵌入型的服务器类，可以嵌入到已有的&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;事件循环中&lt;/li&gt;
&lt;li&gt;网络地址的表达就仅仅使用&lt;code&gt;&amp;quot;ip:port&amp;quot;&lt;/code&gt;这种形式字符串表示，就是参考&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;的设计&lt;/li&gt;
&lt;li&gt;&lt;code&gt;httpc::ConnPool&lt;/code&gt;是一个http的客户端连接池库，设计上尽量考虑高性能和复用。以后基于此还可以增加负载均衡和故障转移等特性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，我们实现过程中极其重视线程安全问题，一个事件相关的资源必须在其所属的&lt;code&gt;EventLoop&lt;/code&gt;（每个&lt;code&gt;EventLoop&lt;/code&gt;绑定一个线程）中初始化和析构释放，这样我们能最大限度的减少出错的可能。为了达到这个目标我们重载&lt;code&gt;event_add&lt;/code&gt;和&lt;code&gt;event_del&lt;/code&gt;等函数，每一次调用&lt;code&gt;event_add&lt;/code&gt;，就在对应的线程私有数据中记录该对象，在调用&lt;code&gt;event_del&lt;/code&gt;时，检查之前该线程私有数据中是否拥有该对象，然后在整个程序退出前，再完整的检查所有线程的私有数据，看看是否仍然有对象没有析构释放。具体实现稍有区别，详细代码实现可以参考 &lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L46~L87&#34;&gt;https://github.com/Qihoo360/evpp/blob/master/evpp/inner_pre.cc#L46~L87&lt;/a&gt;。我们如此苛刻的追求线程安全，只是为了让一个程序能&lt;strong&gt;安静的平稳的退出或Reload&lt;/strong&gt;，因为我们深刻的理解“编写永远运行的系统，和编写运行一段时间后平静关闭的系统是两码事”，后者要困难的多得多。&lt;/p&gt;

&lt;h2 id=&#34;吞吐量benchmark测试报告:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;吞吐量Benchmark测试报告&lt;/h2&gt;

&lt;p&gt;本文用 ping pong 测试来对比&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;与&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;、&lt;a href=&#34;http://www.boost.org/&#34;&gt;boost.asio&lt;/a&gt;、muduo] 等网络的吞吐量，测试结果表明&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;吞吐量与&lt;a href=&#34;http://www.boost.org/&#34;&gt;boost.asio&lt;/a&gt;、&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;等相当，比&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;高&lt;strong&gt;17%~130%&lt;/strong&gt;左右。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;本身是基于&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;实现的，不过&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;只是用了&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;的事件循环，并没有用&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;的&lt;code&gt;evbuffer&lt;/code&gt;，而是自己参考&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;和&lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;实现了自己的网络IO读写类&lt;a href=&#34;https://github.com/Qihoo360/evpp/blob/master/evpp/buffer.h&#34;&gt;Buffer&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;性能测试相关的代码都在这里：&lt;a href=&#34;https://github.com/Qihoo360/evpp/tree/master/benchmark/&#34;&gt;https://github.com/Qihoo360/evpp/tree/master/benchmark/&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;测试对象:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;测试对象&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp/archive/0.2.0.tar.gz&#34;&gt;evpp-0.2.0&lt;/a&gt; based on libevent-2.0.21&lt;/li&gt;
&lt;li&gt;boost.asio-1.53&lt;/li&gt;
&lt;li&gt;libevent-2.0.21&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;系统环境:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;系统环境&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;操作系统：Linux CentOS 6.2, 2.6.32-220.7.1.el6.x86_64&lt;/li&gt;
&lt;li&gt;硬件CPU：Intel&amp;reg; Xeon&amp;reg; CPU E5-2630 v2 @ 2.60GHz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-libevent-1thread-all.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/zieckey/resources/master/evpp/benchmark/throughput/evpp-vs-asio-1thread-all.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;几个简单的示例代码:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;几个简单的示例代码&lt;/h2&gt;

&lt;h2 id=&#34;tcp-echo服务器:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;TCP Echo服务器&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;evpp/tcp_server.h&amp;gt;
#include &amp;lt;evpp/buffer.h&amp;gt;
#include &amp;lt;evpp/tcp_conn.h&amp;gt;

int main(int argc, char* argv[]) {
    std::string addr = &amp;quot;0.0.0.0:9099&amp;quot;;
    int thread_num = 4;
    evpp::EventLoop loop;
    evpp::TCPServer server(&amp;amp;loop, addr, &amp;quot;TCPEchoServer&amp;quot;, thread_num);
    server.SetMessageCallback([](const evpp::TCPConnPtr&amp;amp; conn,
                                 evpp::Buffer* msg,
                                 evpp::Timestamp ts) {
        conn-&amp;gt;Send(msg);
    });
    server.SetConnectionCallback([](const evpp::TCPConnPtr&amp;amp; conn) {
        if (conn-&amp;gt;IsConnected()) {
            LOG_INFO &amp;lt;&amp;lt; &amp;quot;A new connection from &amp;quot; &amp;lt;&amp;lt; conn-&amp;gt;remote_addr();
        } else {
            LOG_INFO &amp;lt;&amp;lt; &amp;quot;Lost the connection from &amp;quot; &amp;lt;&amp;lt; conn-&amp;gt;remote_addr();
        }
    });
    server.Init();
    server.Start();
    loop.Run();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;http-echo服务器:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;HTTP Echo服务器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;evpp/exp.h&amp;gt;
#include &amp;lt;evpp/http/http_server.h&amp;gt;

int main(int argc, char* argv[]) {
    std::vector&amp;lt;int&amp;gt; ports = { 9009, 23456, 23457 };
    int thread_num = 2;
    evpp::http::Server server(thread_num);
    server.RegisterHandler(&amp;quot;/echo&amp;quot;,
                           [](evpp::EventLoop* loop,
                              const evpp::http::ContextPtr&amp;amp; ctx,
                              const evpp::http::HTTPSendResponseCallback&amp;amp; cb) {
        cb(ctx-&amp;gt;body().ToString()); }
    );
    server.Init(ports);
    server.Start();
    while (!server.IsStopped()) {
        usleep(1);
    }
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;udp-echo服务器:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;UDP Echo服务器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;evpp/exp.h&amp;gt;
#include &amp;lt;evpp/udp/udp_server.h&amp;gt;
#include &amp;lt;evpp/udp/udp_message.h&amp;gt;

int main(int argc, char* argv[]) {
    std::vector&amp;lt;int&amp;gt; ports = { 1053, 5353 };
    evpp::udp::Server server;
    server.SetMessageHandler([](evpp::EventLoop* loop, evpp::udp::MessagePtr&amp;amp; msg) {
        evpp::udp::SendMessage(msg);
    });
    server.Init(ports);
    server.Start();

    while (!server.IsStopped()) {
        usleep(1);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;致谢:936b642af201f8dee8eb70b9b4d592bb&#34;&gt;致谢&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;感谢&lt;a href=&#34;http://www.360.cn&#34; title=&#34;http://www.360.cn&#34;&gt;奇虎360公司&lt;/a&gt;对该项目的支持&lt;/li&gt;
&lt;li&gt;感谢&lt;a href=&#34;https://github.com/libevent/libevent&#34;&gt;libevent&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/glog&#34;&gt;glog&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/googletest&#34;&gt;gtest&lt;/a&gt;, &lt;a href=&#34;https://golang.org&#34;&gt;Golang&lt;/a&gt;等项目&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Qihoo360/evpp&#34;&gt;evpp&lt;/a&gt;深度参考了&lt;a href=&#34;https://github.com/chenshuo/muduo&#34;&gt;muduo&lt;/a&gt;项目的实现和设计，非常感谢&lt;a href=&#34;https://github.com/chenshuo&#34; title=&#34;https://github.com/chenshuo&#34;&gt;Chen Shuo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>